//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

@class NSObject;

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AVFoundationVideoCapturer {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType _field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    struct set<sigslot::_signal_base_interface *, std::__1::less<sigslot::_signal_base_interface *>, std::__1::allocator<sigslot::_signal_base_interface *>> _field5;
    CDUnknownFunctionPointerType *_field6;
    struct signal_with_thread_policy<sigslot::single_threaded, cricket::VideoCapturer *, cricket::CaptureState> _field7;
    struct ThreadChecker _field8;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field9;
    int _field10;
    struct unique_ptr<cricket::VideoFormat, std::__1::default_delete<cricket::VideoFormat>> _field11;
    struct vector<cricket::VideoFormat, std::__1::allocator<cricket::VideoFormat>> _field12;
    struct unique_ptr<cricket::VideoFormat, std::__1::default_delete<cricket::VideoFormat>> _field13;
    struct vector<cricket::VideoFormat, std::__1::allocator<cricket::VideoFormat>> _field14;
    _Bool _field15;
    int _field16;
    int _field17;
    struct VideoBroadcaster _field18;
    _Bool _field19;
    struct VideoAdapter _field20;
    struct CriticalSection _field21;
    _Bool _field22;
    int _field23;
    int _field24;
    _Bool _field25;
    struct TimestampAligner _field26;
    id _field27;
    struct I420BufferPool _field28;
};

struct AdaptReason {
    int _field1;
};

struct Array;

struct AtomicSharedPtr<realm::_impl::CollectionNotifier, true> {
    struct shared_ptr<realm::_impl::CollectionNotifier> m_ptr;
};

struct AudioDecoderFactory;

struct AudioDeviceModule {
    CDUnknownFunctionPointerType *_field1;
};

struct AudioEncoderFactory;

struct AudioProcessing;

struct AudioSessionObserver {
    CDUnknownFunctionPointerType *_field1;
};

struct AudioSourceInterface;

struct AudioTrackInterface;

struct BacklinkColumn;

struct BasicRow<const realm::Table> {
    struct BasicTableRef<realm::Table> m_table;
    unsigned long long m_row_ndx;
    struct RowBase *m_prev;
    struct RowBase *m_next;
};

struct BasicRow<realm::Table> {
    struct BasicTableRef<realm::Table> m_table;
    unsigned long long m_row_ndx;
    struct RowBase *m_prev;
    struct RowBase *m_next;
};

struct BasicTableRef<realm::Table> {
    struct Table *m_ptr;
};

struct BinaryData {
    char *m_data;
    unsigned long long m_size;
};

struct BitrateAllocationStrategy;

struct BpTree<long long> {
    struct unique_ptr<realm::Array, std::__1::default_delete<realm::Array>> m_root;
};

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct CGVector {
    double dx;
    double dy;
};

struct CallbackParameters {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    char _field3[512];
    char _field4[512];
    char _field5[512];
    char _field6[512];
    char _field7[512];
    char _field8[512];
    int _field9;
    char _field10[512];
    _Bool _field11;
    long long _field12;
    char *_field13;
    int _field14;
    char *_field15;
    char _field16[512];
    _Bool _field17;
    _Bool _field18;
    char _field19[512];
    int _field20;
    int _field21;
    int _field22;
    int _field23;
    int _field24;
    long long _field25;
    long long _field26;
    char _field27[512];
    char _field28[512];
    char _field29[512];
    char _field30[512];
    char _field31[512];
    char _field32[512];
    long long _field33;
    int _field34;
    char _field35[512];
    char _field36[512];
    char _field37[512];
    char _field38[512];
};

struct ChangesetCooker;

struct Chunk;

struct CollectionChangeSet {
    struct IndexSet deletions;
    struct IndexSet insertions;
    struct IndexSet modifications;
    struct IndexSet modifications_new;
    struct vector<realm::CollectionChangeSet::Move, std::__1::allocator<realm::CollectionChangeSet::Move>> moves;
    struct vector<realm::IndexSet, std::__1::allocator<realm::IndexSet>> columns;
};

struct CollectionNotifier;

struct Column<long long> {
    CDUnknownFunctionPointerType *_vptr$ColumnBase;
    unsigned long long m_column_ndx;
    struct unique_ptr<realm::StringIndex, std::__1::default_delete<realm::StringIndex>> m_search_index;
    struct BpTree<long long> m_tree;
};

struct Condition {
    int type;
    basic_string_a490aa4c user_id;
    struct pair<std::__1::basic_string<char>, std::__1::basic_string<char>> key_value;
};

struct Config {
    basic_string_a490aa4c path;
    struct BinaryData realm_data;
    struct vector<char, std::__1::allocator<char>> encryption_key;
    _Bool in_memory;
    unsigned char schema_mode;
    struct Optional<realm::Schema> schema;
    unsigned long long schema_version;
    struct function<void (std::__1::shared_ptr<realm::Realm>, std::__1::shared_ptr<realm::Realm>, realm::Schema &)> migration_function;
    struct function<void (std::__1::shared_ptr<realm::Realm>)> initialization_function;
    struct function<bool (unsigned long long, unsigned long long)> should_compact_on_launch_function;
    _Bool cache;
    _Bool disable_format_upgrade;
    _Bool automatic_change_notifications;
    struct Optional<unsigned long> execution_context;
    struct shared_ptr<realm::SyncConfig> sync_config;
    _Bool force_sync_history;
};

struct Constraint;

struct Constraints {
    struct Constraint *_field1;
    struct Constraint *_field2;
    struct __compressed_pair<webrtc::MediaConstraintsInterface::Constraint *, std::__1::allocator<webrtc::MediaConstraintsInterface::Constraint>> {
        struct Constraint *_field1;
    } _field3;
};

struct CopyOnWriteBuffer {
    struct scoped_refptr<rtc::RefCountedObject<rtc::BufferT<unsigned char>>> _field1;
};

struct CriticalSection {
    int lock_queue_;
    int recursion_;
    NSObject *semaphore_;
    struct _opaque_pthread_t *owning_thread_;
    struct _opaque_pthread_t *thread_;
    int recursion_count_;
};

struct DataBuffer {
    struct CopyOnWriteBuffer _field1;
    _Bool _field2;
};

struct DataChannelDelegateAdapter;

struct DataChannelInit {
    _Bool reliable;
    _Bool ordered;
    int maxRetransmitTime;
    int maxRetransmits;
    basic_string_90719d97 protocol;
    _Bool negotiated;
    int id;
};

struct DataChannelInterface;

struct Descriptor;

struct DescriptorOrdering {
    struct SortDescriptor sort;
    struct SortDescriptor distinct;
};

struct EncodedImage {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    long long _field4;
    long long _field5;
    int _field6;
    char *_field7;
    unsigned long long _field8;
    unsigned long long _field9;
    int _field10;
    unsigned char _field11;
    _Bool _field12;
    struct AdaptReason _field13;
    int _field14;
    struct PlayoutDelay _field15;
    struct Timing _field16;
};

struct FeedbackParam;

struct FeedbackParams {
    struct vector<cricket::FeedbackParam, std::__1::allocator<cricket::FeedbackParam>> _field1;
};

struct FileRotatingLogSink;

struct Handle<realm::_impl::CollectionNotifier> {
    struct CollectionNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct Handle<realm::_impl::ObjectNotifier> {
    struct ObjectNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct Handle<realm::_impl::ResultsNotifier> {
    struct ResultsNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct I420BufferInterface;

struct I420BufferPool {
    struct RaceChecker _field1;
    struct list<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, std::__1::allocator<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>>> _field2;
    _Bool _field3;
    unsigned long long _field4;
};

struct ICallManager {
    CDUnknownFunctionPointerType *_field1;
};

struct IceCandidateInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct IceServer {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field4;
    int _field5;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field6;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field7;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field8;
};

struct IdBase;

struct IndexSet {
    struct vector<realm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator<realm::_impl::ChunkedRangeVector::Chunk>> m_data;
};

struct IntervalRange {
    int _field1;
    int _field2;
};

struct LinkView;

struct List {
    shared_ptr_130f66cc m_realm;
    struct ObjectSchema *m_object_schema;
    struct shared_ptr<realm::LinkView> m_link_view;
    struct BasicTableRef<realm::Table> m_table;
    struct Handle<realm::_impl::CollectionNotifier> m_notifier;
};

struct MediaConfig {
    _Bool _field1;
    struct Video _field2;
};

struct MediaConstraints;

struct MediaSourceInterface;

struct MediaStreamInterface;

struct MediaStreamTrackInterface;

struct Move;

struct NSObject {
    Class _field1;
};

struct NotificationToken {
    struct AtomicSharedPtr<realm::_impl::CollectionNotifier, true> m_notifier;
    unsigned long long m_token;
};

struct Object {
    shared_ptr_130f66cc m_realm;
    struct ObjectSchema *m_object_schema;
    struct BasicRow<realm::Table> m_row;
    struct Handle<realm::_impl::ObjectNotifier> m_notifier;
};

struct ObjectNotifier;

struct ObjectSchema {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    struct vector<realm::Property, std::__1::allocator<realm::Property>> _field2;
    struct vector<realm::Property, std::__1::allocator<realm::Property>> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field4;
};

struct Optional<bool> {
    _Bool _field1;
    union {
        char _field1;
        _Bool _field2;
    } _field2;
};

struct Optional<cricket::VideoFormat> {
    _Bool _field1;
    union {
        char _field1;
        struct VideoFormat _field2;
    } _field2;
};

struct Optional<int> {
    _Bool _field1;
    CDUnion_0506adf3 _field2;
};

struct Optional<long long> {
    _Bool _field1;
    union {
        char _field1;
        long long _field2;
    } _field2;
};

struct Optional<realm::Permission> {
    union {
        struct Permission m_value;
        char m_null_state;
    } ;
    _Bool m_engaged;
};

struct Optional<realm::Schema> {
    union {
        struct Schema m_value;
        char m_null_state;
    } ;
    _Bool m_engaged;
};

struct Optional<rtc::IntervalRange> {
    _Bool _field1;
    union {
        char _field1;
        struct IntervalRange _field2;
    } _field2;
};

struct Optional<std::__1::array<char, 64>> {
    union {
        struct array<char, 64> _field1;
        char _field2;
    } _field1;
    _Bool _field2;
};

struct Optional<std::__1::basic_string<char>> {
    union {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
            struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
                struct __rep _field1;
            } _field1;
        } _field1;
        char _field2;
    } _field1;
    _Bool _field2;
};

struct Optional<unsigned int> {
    _Bool _field1;
    union {
        char _field1;
        unsigned int _field2;
    } _field2;
};

struct Optional<unsigned long long> {
    CDUnion_f76efdce ;
    _Bool m_engaged;
};

struct Optional<unsigned long> {
    CDUnion_f76efdce ;
    _Bool m_engaged;
};

struct Optional<webrtc::DtxStatus> {
    _Bool _field1;
    CDUnion_0506adf3 _field2;
};

struct Optional<webrtc::PriorityType> {
    _Bool _field1;
    CDUnion_0506adf3 _field2;
};

struct Optional<webrtc::RtpFecParameters> {
    _Bool _field1;
    union {
        char _field1;
        struct RtpFecParameters _field2;
    } _field2;
};

struct Optional<webrtc::RtpRtxParameters> {
    _Bool _field1;
    union {
        char _field1;
        struct RtpRtxParameters _field2;
    } _field2;
};

struct PeerConnectionDelegateAdapter;

struct PeerConnectionFactoryInterface;

struct PeerConnectionInterface;

struct Permission {
    basic_string_a490aa4c path;
    int access;
    struct Condition condition;
    struct Timestamp updated_at;
};

struct PlayoutDelay {
    int _field1;
    int _field2;
};

struct Property {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    unsigned char _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field4;
    struct TaggedBool<realm::IsPrimaryTag> _field5;
    struct TaggedBool<realm::IsIndexedTag> _field6;
    unsigned long long _field7;
};

struct Query {
    basic_string_a490aa4c error_code;
    struct vector<realm::QueryGroup, std::__1::allocator<realm::QueryGroup>> m_groups;
    struct vector<unsigned long, std::__1::allocator<unsigned long>> m_subtable_path;
    struct shared_ptr<const realm::Descriptor> m_current_descriptor;
    struct BasicTableRef<realm::Table> m_table;
    struct RowIndexes *m_view;
    struct shared_ptr<realm::LinkView> m_source_link_view;
    struct TableViewBase *m_source_table_view;
    struct unique_ptr<realm::TableViewBase, std::__1::default_delete<realm::TableViewBase>> m_owned_source_table_view;
};

struct QueryGroup;

struct RLMClassInfo {
    id _field1;
    id _field2;
    struct ObjectSchema *_field3;
    struct vector<RLMObservationInfo *, std::__1::allocator<RLMObservationInfo *>> _field4;
    struct Table *_field5;
    struct vector<RLMClassInfo *, std::__1::allocator<RLMClassInfo *>> _field6;
};

struct RLMObservationInfo {
    struct RLMObservationInfo *_field1;
    struct RLMObservationInfo *_field2;
    struct BasicRow<realm::Table> _field3;
    struct RLMClassInfo *_field4;
    id _field5;
    _Bool _field6;
    unsigned long long _field7;
    id _field8;
    id _field9;
    id _field10;
};

struct RLMSchemaInfo {
    struct unordered_map<NSString *, RLMClassInfo, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, RLMClassInfo>>> m_objects;
};

struct RTCConfiguration {
    struct vector<webrtc::PeerConnectionInterface::IceServer, std::__1::allocator<webrtc::PeerConnectionInterface::IceServer>> _field1;
    int _field2;
    int _field3;
    int _field4;
    struct vector<rtc::scoped_refptr<rtc::RTCCertificate>, std::__1::allocator<rtc::scoped_refptr<rtc::RTCCertificate>>> _field5;
    int _field6;
    _Bool _field7;
    _Bool _field8;
    int _field9;
    _Bool _field10;
    struct Optional<int> _field11;
    struct Optional<bool> _field12;
    struct Optional<bool> _field13;
    int _field14;
    int _field15;
    int _field16;
    _Bool _field17;
    int _field18;
    int _field19;
    int _field20;
    _Bool _field21;
    struct MediaConfig _field22;
    _Bool _field23;
    _Bool _field24;
    _Bool _field25;
    _Bool _field26;
    struct Optional<int> _field27;
    struct Optional<rtc::IntervalRange> _field28;
    struct TurnCustomizer *_field29;
    int _field30;
};

struct RTPFragmentationHeader {
    unsigned short _field1;
    unsigned long long *_field2;
    unsigned long long *_field3;
    unsigned short *_field4;
    char *_field5;
};

struct RaceChecker {
    int _field1;
    struct _opaque_pthread_t *_field2;
};

struct Realm;

struct RefCountedObject<rtc::BufferT<unsigned char>>;

struct Results {
    shared_ptr_130f66cc m_realm;
    struct ObjectSchema *m_object_schema;
    struct Query m_query;
    struct TableView m_table_view;
    struct shared_ptr<realm::LinkView> m_link_view;
    struct BasicTableRef<realm::Table> m_table;
    struct DescriptorOrdering m_descriptor_ordering;
    struct Handle<realm::_impl::ResultsNotifier> m_notifier;
    int m_mode;
    int m_update_policy;
    _Bool m_has_used_table_view;
    _Bool m_wants_background_updates;
};

struct ResultsNotifier;

struct RowBase;

struct RowIndexes;

struct RtcpFeedback;

struct RtpCodecParameters {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    int _field2;
    int _field3;
    struct Optional<int> _field4;
    struct Optional<int> _field5;
    struct Optional<int> _field6;
    struct Optional<int> _field7;
    struct vector<webrtc::RtcpFeedback, std::__1::allocator<webrtc::RtcpFeedback>> _field8;
    struct unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field9;
};

struct RtpEncodingParameters {
    struct Optional<unsigned int> _field1;
    struct Optional<int> _field2;
    struct Optional<webrtc::RtpFecParameters> _field3;
    struct Optional<webrtc::RtpRtxParameters> _field4;
    struct Optional<webrtc::DtxStatus> _field5;
    struct Optional<webrtc::PriorityType> _field6;
    struct Optional<int> _field7;
    struct Optional<int> _field8;
    double _field9;
    double _field10;
    _Bool _field11;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field12;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field13;
};

struct RtpExtension;

struct RtpFecParameters {
    struct Optional<unsigned int> _field1;
    int _field2;
};

struct RtpParameters {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field2;
    struct vector<webrtc::RtpCodecParameters, std::__1::allocator<webrtc::RtpCodecParameters>> _field3;
    struct vector<webrtc::RtpExtension, std::__1::allocator<webrtc::RtpExtension>> _field4;
    struct vector<webrtc::RtpEncodingParameters, std::__1::allocator<webrtc::RtpEncodingParameters>> _field5;
    int _field6;
};

struct RtpReceiverDelegateAdapter;

struct RtpReceiverInterface;

struct RtpRtxParameters {
    struct Optional<unsigned int> _field1;
};

struct RtpSenderInterface;

struct SIPCallback {
    CDUnknownFunctionPointerType *_field1;
    id _field2;
};

struct SampleInfo {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    int _field2;
    int _field3;
    unsigned long long _field4;
    struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int>>> _field5;
};

struct Schema {
    struct ObjectSchema *__begin_;
    struct ObjectSchema *__end_;
    struct __compressed_pair<realm::ObjectSchema *, std::__1::allocator<realm::ObjectSchema>> {
        struct ObjectSchema *__first_;
    } __end_cap_;
};

struct SdpVideoFormat {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field1;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field2;
};

struct SessionDescriptionInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct SimulcastStream {
    unsigned short _field1;
    unsigned short _field2;
    unsigned char _field3;
    unsigned int _field4;
    unsigned int _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct SinkPair;

struct SortDescriptor {
    struct vector<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>, std::__1::allocator<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>>> m_columns;
    struct vector<bool, std::__1::allocator<bool>> m_ascending;
};

struct SpatialLayer {
    int _field1;
    int _field2;
    int _field3;
};

struct StatsReport {
    struct scoped_refptr<webrtc::StatsReport::IdBase> _field1;
    double _field2;
    struct map<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>, std::__1::less<webrtc::StatsReport::StatsValueName>, std::__1::allocator<std::__1::pair<const webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>>> _field3;
};

struct StringIndex;

struct SyncConfig {
    shared_ptr_324a0594 _field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field2;
    int _field3;
    struct function<void (const std::__1::basic_string<char>&, const realm::SyncConfig &, std::__1::shared_ptr<realm::SyncSession>)> _field4;
    function_0cf83702 _field5;
    struct shared_ptr<realm::sync::ClientHistory::ChangesetCooker> _field6;
    struct Optional<std::__1::array<char, 64>> _field7;
    _Bool _field8;
    struct Optional<std::__1::basic_string<char>> _field9;
    struct function<bool (const std::__1::basic_string<char>&, unsigned short, const char *, unsigned long, int, int)> _field10;
};

struct SyncSession;

struct SyncUser;

struct Table;

struct TableView {
    CDUnknownFunctionPointerType *_vptr$RowIndexes;
    struct Column<long long> m_row_indexes;
    unsigned long long m_debug_cookie;
    struct BasicTableRef<realm::Table> m_table;
    struct BacklinkColumn *m_linked_column;
    struct BasicRow<const realm::Table> m_linked_row;
    struct shared_ptr<const realm::LinkView> m_linkview_source;
    unsigned long long m_distinct_column_source;
    struct SortDescriptor m_distinct_predicate;
    struct SortDescriptor m_sorting_predicate;
    struct Query m_query;
    unsigned long long m_start;
    unsigned long long m_end;
    unsigned long long m_limit;
    struct Optional<unsigned long long> m_last_seen_version;
    unsigned long long m_num_detached_refs;
};

struct TableViewBase;

struct TaggedBool<realm::IsIndexedTag> {
    _Bool _field1;
};

struct TaggedBool<realm::IsPrimaryTag> {
    _Bool _field1;
};

struct TemporalLayersFactory;

struct Thread;

struct ThreadChecker;

struct ThreadSafeReferenceBase;

struct Timestamp {
    long long m_seconds;
    int m_nanoseconds;
    _Bool m_is_null;
};

struct TimestampAligner {
    int _field1;
    long long _field2;
    long long _field3;
    long long _field4;
};

struct Timing {
    unsigned char _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
    long long _field8;
    long long _field9;
};

struct TimingFrameTriggerThresholds {
    long long _field1;
    unsigned short _field2;
};

struct TurnCustomizer {
    CDUnknownFunctionPointerType *_field1;
};

struct UIEdgeInsets {
    double top;
    double left;
    double bottom;
    double right;
};

struct Video {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
};

struct VideoAdapter {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    int _field3;
    int _field4;
    int _field5;
    int _field6;
    int _field7;
    int _field8;
    struct Optional<long long> _field9;
    struct Optional<cricket::VideoFormat> _field10;
    int _field11;
    int _field12;
    int _field13;
    struct CriticalSection _field14;
};

struct VideoBroadcaster {
    CDUnknownFunctionPointerType *_field1;
    struct ThreadChecker _field2;
    struct vector<rtc::VideoSourceBase::SinkPair, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> _field3;
    CDUnknownFunctionPointerType *_field4;
    struct ThreadChecker _field5;
    struct CriticalSection _field6;
    struct VideoSinkWants _field7;
    struct scoped_refptr<webrtc::VideoFrameBuffer> _field8;
};

struct VideoCaptureCapability {
    int width;
    int height;
    int maxFPS;
    int videoType;
    _Bool interlaced;
};

struct VideoCaptureIos {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    char *_field3;
    struct CriticalSection _field4;
    struct VideoCaptureCapability _field5;
    long long _field6;
    long long _field7;
    VideoSinkInterface_a6f4a563 *_field8;
    long long _field9;
    long long _field10[90];
    int _field11;
    _Bool _field12;
    id _field13;
    _Bool _field14;
    struct VideoCaptureCapability _field15;
};

struct VideoCodecH263 {
    char _field1;
    int _field2;
};

struct VideoCodecH264 {
    _Bool _field1;
    int _field2;
    char *_field3;
    unsigned long long _field4;
    char *_field5;
    unsigned long long _field6;
    int _field7;
};

struct VideoCodecVP8 {
    _Bool _field1;
    int _field2;
    int _field3;
    unsigned char _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    int _field9;
    struct TemporalLayersFactory *_field10;
};

struct VideoCodecVP9 {
    int _field1;
    _Bool _field2;
    unsigned char _field3;
    _Bool _field4;
    _Bool _field5;
    int _field6;
    _Bool _field7;
    _Bool _field8;
    unsigned char _field9;
    _Bool _field10;
};

struct VideoDecoder;

struct VideoDecoderFactory;

struct VideoEncoder;

struct VideoEncoderFactory;

struct VideoFormat {
    int _field1;
    int _field2;
    long long _field3;
    unsigned int _field4;
};

struct VideoFrame {
    struct scoped_refptr<webrtc::VideoFrameBuffer> _field1;
    unsigned int _field2;
    long long _field3;
    long long _field4;
    int _field5;
};

struct VideoFrameBuffer;

struct VideoRendererAdapter;

struct VideoSinkInterface<webrtc::VideoFrame> {
    CDUnknownFunctionPointerType *_field1;
};

struct VideoSinkWants {
    _Bool _field1;
    _Bool _field2;
    int _field3;
    struct Optional<int> _field4;
    int _field5;
};

struct VideoTrackInterface;

struct VideoTrackSourceInterface;

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __CFString;

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> *_field1;
};

struct __list_node_base<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, void *> {
    struct __list_node_base<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, void *> *_field1;
    struct __list_node_base<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, void *> *_field2;
};

struct __list_node_base<sigslot::_opaque_connection, void *> {
    struct __list_node_base<sigslot::_opaque_connection, void *> *_field1;
    struct __list_node_base<sigslot::_opaque_connection, void *> *_field2;
};

struct __rep {
    union {
        struct __long {
            char *__data_;
            unsigned long long __size_;
            unsigned long long __cap_;
        } __l;
        struct __short {
            char __data_[23];
            struct {
                unsigned char __size_;
            } ;
        } __s;
        struct __raw {
            unsigned long long __words[3];
        } __r;
    } ;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct _opaque_pthread_mutex_t {
    long long __sig;
    char __opaque[56];
};

struct _opaque_pthread_t;

struct array<char, 64> {
    char _field1[64];
};

struct function<bool (const std::__1::basic_string<char>&, unsigned short, const char *, unsigned long, int, int)> {
    struct type _field1;
    struct __base<bool (const std::__1::basic_string<char>&, unsigned short, const char *, unsigned long, int, int)> *_field2;
};

struct function<bool (unsigned long long, unsigned long long)> {
    struct type __buf_;
    struct __base<bool (unsigned long long, unsigned long long)> *__f_;
};

struct function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>;

struct function<void (const std::__1::basic_string<char>&, const realm::SyncConfig &, std::__1::shared_ptr<realm::SyncSession>)> {
    struct type _field1;
    struct __base<void (const std::__1::basic_string<char>&, const realm::SyncConfig &, std::__1::shared_ptr<realm::SyncSession>)> *_field2;
};

struct function<void (std::__1::shared_ptr<realm::Realm>)> {
    struct type __buf_;
    struct __base<void (std::__1::shared_ptr<realm::Realm>)> *__f_;
};

struct function<void (std::__1::shared_ptr<realm::Realm>, std::__1::shared_ptr<realm::Realm>, realm::Schema &)> {
    struct type __buf_;
    struct __base<void (std::__1::shared_ptr<realm::Realm>, std::__1::shared_ptr<realm::Realm>, realm::Schema &)> *__f_;
};

struct function<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> {
    struct type _field1;
    struct __base<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> *_field2;
};

struct list<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, std::__1::allocator<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>>> {
    struct __list_node_base<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<rtc::scoped_refptr<rtc::RefCountedObject<webrtc::I420Buffer>>, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct list<sigslot::_opaque_connection, std::__1::allocator<sigslot::_opaque_connection>> {
    struct __list_node_base<sigslot::_opaque_connection, void *> _field1;
    struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sigslot::_opaque_connection, void *>>> {
        unsigned long long _field1;
    } _field2;
};

struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int>>> {
    struct __tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>, std::__1::less<webrtc::StatsReport::StatsValueName>, std::__1::allocator<std::__1::pair<const webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>>> {
    struct __tree<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>, std::__1::__map_value_compare<webrtc::StatsReport::StatsValueName, std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>, std::__1::less<webrtc::StatsReport::StatsValueName>, true>, std::__1::allocator<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<webrtc::StatsReport::StatsValueName, std::__1::__value_type<webrtc::StatsReport::StatsValueName, rtc::scoped_refptr<webrtc::StatsReport::Value>>, std::__1::less<webrtc::StatsReport::StatsValueName>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct pair<std::__1::basic_string<char>, std::__1::basic_string<char>> {
    basic_string_a490aa4c first;
    basic_string_a490aa4c second;
};

struct scoped_refptr<rtc::RTCCertificate>;

struct scoped_refptr<rtc::RefCountedObject<rtc::BufferT<unsigned char>>> {
    struct RefCountedObject<rtc::BufferT<unsigned char>> *_field1;
};

struct scoped_refptr<webrtc::AudioDecoderFactory> {
    struct AudioDecoderFactory *_field1;
};

struct scoped_refptr<webrtc::AudioEncoderFactory> {
    struct AudioEncoderFactory *_field1;
};

struct scoped_refptr<webrtc::AudioProcessing> {
    struct AudioProcessing *_field1;
};

struct scoped_refptr<webrtc::AudioSourceInterface> {
    struct AudioSourceInterface *ptr_;
};

struct scoped_refptr<webrtc::AudioTrackInterface> {
    struct AudioTrackInterface *_field1;
};

struct scoped_refptr<webrtc::DataChannelInterface> {
    struct DataChannelInterface *ptr_;
};

struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaSourceInterface> {
    struct MediaSourceInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaStreamInterface> {
    struct MediaStreamInterface *ptr_;
};

struct scoped_refptr<webrtc::MediaStreamTrackInterface> {
    struct MediaStreamTrackInterface *ptr_;
};

struct scoped_refptr<webrtc::PeerConnectionFactoryInterface> {
    struct PeerConnectionFactoryInterface *ptr_;
};

struct scoped_refptr<webrtc::PeerConnectionInterface> {
    struct PeerConnectionInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpReceiverInterface> {
    struct RtpReceiverInterface *ptr_;
};

struct scoped_refptr<webrtc::RtpSenderInterface> {
    struct RtpSenderInterface *ptr_;
};

struct scoped_refptr<webrtc::StatsReport::IdBase> {
    struct IdBase *_field1;
};

struct scoped_refptr<webrtc::VideoFrameBuffer> {
    struct VideoFrameBuffer *_field1;
};

struct scoped_refptr<webrtc::VideoTrackInterface> {
    struct VideoTrackInterface *_field1;
};

struct scoped_refptr<webrtc::VideoTrackSourceInterface> {
    struct VideoTrackSourceInterface *ptr_;
};

struct set<sigslot::_signal_base_interface *, std::__1::less<sigslot::_signal_base_interface *>, std::__1::allocator<sigslot::_signal_base_interface *>> {
    struct __tree<sigslot::_signal_base_interface *, std::__1::less<sigslot::_signal_base_interface *>, std::__1::allocator<sigslot::_signal_base_interface *>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<sigslot::_signal_base_interface *, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<sigslot::_signal_base_interface *>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<const realm::Descriptor> {
    struct Descriptor *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<const realm::LinkView> {
    struct LinkView *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::LinkView> {
    struct LinkView *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::Realm> {
    struct Realm *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::SyncConfig> {
    struct SyncConfig *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::SyncSession> {
    struct SyncSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::SyncUser> {
    struct SyncUser *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::_impl::CollectionNotifier> {
    struct CollectionNotifier *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<realm::sync::ClientHistory::ChangesetCooker> {
    struct ChangesetCooker *_field1;
    struct __shared_weak_count *_field2;
};

struct signal_with_thread_policy<sigslot::single_threaded, cricket::VideoCapturer *, cricket::CaptureState> {
    CDUnknownFunctionPointerType _field1;
    CDUnknownFunctionPointerType _field2;
    struct list<sigslot::_opaque_connection, std::__1::allocator<sigslot::_opaque_connection>> _field3;
    struct __list_iterator<sigslot::_opaque_connection, void *> {
        struct __list_node_base<sigslot::_opaque_connection, void *> *_field1;
    } _field4;
    _Bool _field5;
};

struct type {
    unsigned char __lx[24];
};

struct unique_ptr<RLMObservationInfo, std::__1::default_delete<RLMObservationInfo>> {
    struct __compressed_pair<RLMObservationInfo *, std::__1::default_delete<RLMObservationInfo>> {
        struct RLMObservationInfo *__first_;
    } __ptr_;
};

struct unique_ptr<cricket::VideoFormat, std::__1::default_delete<cricket::VideoFormat>> {
    struct __compressed_pair<cricket::VideoFormat *, std::__1::default_delete<cricket::VideoFormat>> {
        struct VideoFormat *_field1;
    } _field1;
};

struct unique_ptr<id [], std::__1::default_delete<id []>> {
    struct __compressed_pair<__strong id *, std::__1::default_delete<id []>> {
        id *__first_;
    } __ptr_;
};

struct unique_ptr<realm::Array, std::__1::default_delete<realm::Array>> {
    struct __compressed_pair<realm::Array *, std::__1::default_delete<realm::Array>> {
        struct Array *__first_;
    } __ptr_;
};

struct unique_ptr<realm::StringIndex, std::__1::default_delete<realm::StringIndex>> {
    struct __compressed_pair<realm::StringIndex *, std::__1::default_delete<realm::StringIndex>> {
        struct StringIndex *__first_;
    } __ptr_;
};

struct unique_ptr<realm::SyncConfig, std::__1::default_delete<realm::SyncConfig>> {
    struct __compressed_pair<realm::SyncConfig *, std::__1::default_delete<realm::SyncConfig>> {
        struct SyncConfig *__first_;
    } __ptr_;
};

struct unique_ptr<realm::TableViewBase, std::__1::default_delete<realm::TableViewBase>> {
    struct __compressed_pair<realm::TableViewBase *, std::__1::default_delete<realm::TableViewBase>> {
        struct TableViewBase *__first_;
    } __ptr_;
};

struct unique_ptr<realm::ThreadSafeReferenceBase, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
    struct __compressed_pair<realm::ThreadSafeReferenceBase *, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
        struct ThreadSafeReferenceBase *__first_;
    } __ptr_;
};

struct unique_ptr<rtc::BitrateAllocationStrategy, std::__1::default_delete<rtc::BitrateAllocationStrategy>> {
    struct __compressed_pair<rtc::BitrateAllocationStrategy *, std::__1::default_delete<rtc::BitrateAllocationStrategy>> {
        struct BitrateAllocationStrategy *_field1;
    } _field1;
};

struct unique_ptr<rtc::FileRotatingLogSink, std::__1::default_delete<rtc::FileRotatingLogSink>> {
    struct __compressed_pair<rtc::FileRotatingLogSink *, std::__1::default_delete<rtc::FileRotatingLogSink>> {
        struct FileRotatingLogSink *__value_;
    } __ptr_;
};

struct unique_ptr<rtc::IntervalRange, std::__1::default_delete<rtc::IntervalRange>> {
    struct __compressed_pair<rtc::IntervalRange *, std::__1::default_delete<rtc::IntervalRange>> {
        struct IntervalRange *_field1;
    } _field1;
};

struct unique_ptr<rtc::Thread, std::__1::default_delete<rtc::Thread>> {
    struct __compressed_pair<rtc::Thread *, std::__1::default_delete<rtc::Thread>> {
        struct Thread *__value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>, std::__1::default_delete<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>>> {
    struct __compressed_pair<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>*, std::__1::default_delete<std::__1::function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)>>> {
        struct function<realm::Realm::Config (std::__1::shared_ptr<realm::SyncUser>, std::__1::basic_string<char>)> *__first_;
    } __ptr_;
};

struct unique_ptr<webrtc::DataBuffer, std::__1::default_delete<webrtc::DataBuffer>> {
    struct __compressed_pair<webrtc::DataBuffer *, std::__1::default_delete<webrtc::DataBuffer>> {
        struct DataBuffer *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::DataChannelDelegateAdapter, std::__1::default_delete<webrtc::DataChannelDelegateAdapter>> {
    struct __compressed_pair<webrtc::DataChannelDelegateAdapter *, std::__1::default_delete<webrtc::DataChannelDelegateAdapter>> {
        struct DataChannelDelegateAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::IceCandidateInterface, std::__1::default_delete<webrtc::IceCandidateInterface>> {
    struct __compressed_pair<webrtc::IceCandidateInterface *, std::__1::default_delete<webrtc::IceCandidateInterface>> {
        struct IceCandidateInterface *_field1;
    } _field1;
};

struct unique_ptr<webrtc::MediaConstraints, std::__1::default_delete<webrtc::MediaConstraints>> {
    struct __compressed_pair<webrtc::MediaConstraints *, std::__1::default_delete<webrtc::MediaConstraints>> {
        struct MediaConstraints *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::PeerConnectionDelegateAdapter, std::__1::default_delete<webrtc::PeerConnectionDelegateAdapter>> {
    struct __compressed_pair<webrtc::PeerConnectionDelegateAdapter *, std::__1::default_delete<webrtc::PeerConnectionDelegateAdapter>> {
        struct PeerConnectionDelegateAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::RTPFragmentationHeader, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
    struct __compressed_pair<webrtc::RTPFragmentationHeader *, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
        struct RTPFragmentationHeader *_field1;
    } _field1;
};

struct unique_ptr<webrtc::RtpReceiverDelegateAdapter, std::__1::default_delete<webrtc::RtpReceiverDelegateAdapter>> {
    struct __compressed_pair<webrtc::RtpReceiverDelegateAdapter *, std::__1::default_delete<webrtc::RtpReceiverDelegateAdapter>> {
        struct RtpReceiverDelegateAdapter *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoDecoder, std::__1::default_delete<webrtc::VideoDecoder>> {
    struct __compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder>> {
        struct VideoDecoder *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoDecoderFactory, std::__1::default_delete<webrtc::VideoDecoderFactory>> {
    struct __compressed_pair<webrtc::VideoDecoderFactory *, std::__1::default_delete<webrtc::VideoDecoderFactory>> {
        struct VideoDecoderFactory *_field1;
    } _field1;
};

struct unique_ptr<webrtc::VideoEncoder, std::__1::default_delete<webrtc::VideoEncoder>> {
    struct __compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder>> {
        struct VideoEncoder *__value_;
    } __ptr_;
};

struct unique_ptr<webrtc::VideoEncoderFactory, std::__1::default_delete<webrtc::VideoEncoderFactory>> {
    struct __compressed_pair<webrtc::VideoEncoderFactory *, std::__1::default_delete<webrtc::VideoEncoderFactory>> {
        struct VideoEncoderFactory *_field1;
    } _field1;
};

struct unique_ptr<webrtc::VideoRendererAdapter, std::__1::default_delete<webrtc::VideoRendererAdapter>> {
    struct __compressed_pair<webrtc::VideoRendererAdapter *, std::__1::default_delete<webrtc::VideoRendererAdapter>> {
        struct VideoRendererAdapter *__value_;
    } __ptr_;
};

struct unordered_map<NSString *, RLMClassInfo, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, RLMClassInfo>>> {
    struct __hash_table<std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, RLMClassInfo>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, RLMClassInfo>, void *>*> __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::hash<NSString *>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, RLMClassInfo>, std::__1::equal_to<NSString *>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<RLMClassInfo *, std::__1::allocator<RLMClassInfo *>> {
    struct RLMClassInfo **_field1;
    struct RLMClassInfo **_field2;
    struct __compressed_pair<RLMClassInfo **, std::__1::allocator<RLMClassInfo *>> {
        struct RLMClassInfo **_field1;
    } _field3;
};

struct vector<RLMObservationInfo *, std::__1::allocator<RLMObservationInfo *>> {
    struct RLMObservationInfo **_field1;
    struct RLMObservationInfo **_field2;
    struct __compressed_pair<RLMObservationInfo **, std::__1::allocator<RLMObservationInfo *>> {
        struct RLMObservationInfo **_field1;
    } _field3;
};

struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<bool, std::__1::allocator<bool>> {
    unsigned long long *__begin_;
    unsigned long long __size_;
    struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long>> {
        unsigned long long __first_;
    } __cap_alloc_;
};

struct vector<char, std::__1::allocator<char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<char *, std::__1::allocator<char>> {
        char *__first_;
    } __end_cap_;
};

struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>;

struct vector<cricket::FeedbackParam, std::__1::allocator<cricket::FeedbackParam>> {
    struct FeedbackParam *_field1;
    struct FeedbackParam *_field2;
    struct __compressed_pair<cricket::FeedbackParam *, std::__1::allocator<cricket::FeedbackParam>> {
        struct FeedbackParam *_field1;
    } _field3;
};

struct vector<cricket::VideoFormat, std::__1::allocator<cricket::VideoFormat>> {
    struct VideoFormat *_field1;
    struct VideoFormat *_field2;
    struct __compressed_pair<cricket::VideoFormat *, std::__1::allocator<cricket::VideoFormat>> {
        struct VideoFormat *_field1;
    } _field3;
};

struct vector<realm::CollectionChangeSet::Move, std::__1::allocator<realm::CollectionChangeSet::Move>> {
    struct Move *__begin_;
    struct Move *__end_;
    struct __compressed_pair<realm::CollectionChangeSet::Move *, std::__1::allocator<realm::CollectionChangeSet::Move>> {
        struct Move *__first_;
    } __end_cap_;
};

struct vector<realm::IndexSet, std::__1::allocator<realm::IndexSet>> {
    struct IndexSet *__begin_;
    struct IndexSet *__end_;
    struct __compressed_pair<realm::IndexSet *, std::__1::allocator<realm::IndexSet>> {
        struct IndexSet *__first_;
    } __end_cap_;
};

struct vector<realm::Property, std::__1::allocator<realm::Property>> {
    struct Property *_field1;
    struct Property *_field2;
    struct __compressed_pair<realm::Property *, std::__1::allocator<realm::Property>> {
        struct Property *_field1;
    } _field3;
};

struct vector<realm::QueryGroup, std::__1::allocator<realm::QueryGroup>> {
    struct QueryGroup *__begin_;
    struct QueryGroup *__end_;
    struct __compressed_pair<realm::QueryGroup *, std::__1::allocator<realm::QueryGroup>> {
        struct QueryGroup *__first_;
    } __end_cap_;
};

struct vector<realm::_impl::ChunkedRangeVector::Chunk, std::__1::allocator<realm::_impl::ChunkedRangeVector::Chunk>> {
    struct Chunk *__begin_;
    struct Chunk *__end_;
    struct __compressed_pair<realm::_impl::ChunkedRangeVector::Chunk *, std::__1::allocator<realm::_impl::ChunkedRangeVector::Chunk>> {
        struct Chunk *__first_;
    } __end_cap_;
};

struct vector<rtc::VideoSourceBase::SinkPair, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> {
    struct SinkPair *_field1;
    struct SinkPair *_field2;
    struct __compressed_pair<rtc::VideoSourceBase::SinkPair *, std::__1::allocator<rtc::VideoSourceBase::SinkPair>> {
        struct SinkPair *_field1;
    } _field3;
};

struct vector<rtc::scoped_refptr<rtc::RTCCertificate>, std::__1::allocator<rtc::scoped_refptr<rtc::RTCCertificate>>> {
    struct scoped_refptr<rtc::RTCCertificate> *_field1;
    struct scoped_refptr<rtc::RTCCertificate> *_field2;
    struct __compressed_pair<rtc::scoped_refptr<rtc::RTCCertificate>*, std::__1::allocator<rtc::scoped_refptr<rtc::RTCCertificate>>> {
        struct scoped_refptr<rtc::RTCCertificate> *_field1;
    } _field3;
};

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> *_field1;
    } _field3;
};

struct vector<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>, std::__1::allocator<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>>> {
    struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>> *__begin_;
    struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>> *__end_;
    struct __compressed_pair<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>*, std::__1::allocator<std::__1::vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>>>> {
        struct vector<const realm::ColumnBase *, std::__1::allocator<const realm::ColumnBase *>> *__first_;
    } __end_cap_;
};

struct vector<unsigned long, std::__1::allocator<unsigned long>> {
    unsigned long long *__begin_;
    unsigned long long *__end_;
    struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long>> {
        unsigned long long *__first_;
    } __end_cap_;
};

struct vector<webrtc::PeerConnectionInterface::IceServer, std::__1::allocator<webrtc::PeerConnectionInterface::IceServer>> {
    struct IceServer *_field1;
    struct IceServer *_field2;
    struct __compressed_pair<webrtc::PeerConnectionInterface::IceServer *, std::__1::allocator<webrtc::PeerConnectionInterface::IceServer>> {
        struct IceServer *_field1;
    } _field3;
};

struct vector<webrtc::RtcpFeedback, std::__1::allocator<webrtc::RtcpFeedback>> {
    struct RtcpFeedback *_field1;
    struct RtcpFeedback *_field2;
    struct __compressed_pair<webrtc::RtcpFeedback *, std::__1::allocator<webrtc::RtcpFeedback>> {
        struct RtcpFeedback *_field1;
    } _field3;
};

struct vector<webrtc::RtpCodecParameters, std::__1::allocator<webrtc::RtpCodecParameters>> {
    struct RtpCodecParameters *_field1;
    struct RtpCodecParameters *_field2;
    struct __compressed_pair<webrtc::RtpCodecParameters *, std::__1::allocator<webrtc::RtpCodecParameters>> {
        struct RtpCodecParameters *_field1;
    } _field3;
};

struct vector<webrtc::RtpEncodingParameters, std::__1::allocator<webrtc::RtpEncodingParameters>> {
    struct RtpEncodingParameters *_field1;
    struct RtpEncodingParameters *_field2;
    struct __compressed_pair<webrtc::RtpEncodingParameters *, std::__1::allocator<webrtc::RtpEncodingParameters>> {
        struct RtpEncodingParameters *_field1;
    } _field3;
};

struct vector<webrtc::RtpExtension, std::__1::allocator<webrtc::RtpExtension>> {
    struct RtpExtension *_field1;
    struct RtpExtension *_field2;
    struct __compressed_pair<webrtc::RtpExtension *, std::__1::allocator<webrtc::RtpExtension>> {
        struct RtpExtension *_field1;
    } _field3;
};

struct weak_ptr<realm::SyncSession> {
    struct SyncSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct weak_ptr<realm::SyncUser> {
    struct SyncUser *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

#if 0
// Names with conflicting types:
typedef struct {
    int _field1;
    char _field2[32];
    unsigned char _field3;
    unsigned short _field4;
    unsigned short _field5;
    unsigned int _field6;
    unsigned int _field7;
    unsigned int _field8;
    unsigned int _field9;
    unsigned int _field10;
    unsigned int _field11;
    unsigned char _field12;
    struct SimulcastStream _field13[4];
    struct SpatialLayer _field14[5];
    int _field15;
    _Bool _field16;
    struct TimingFrameTriggerThresholds _field17;
    union VideoCodecUnion _field18;
} VideoCodec_daf0e4c4;

typedef struct ?<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep __first_;
} __compressed_pair_5b4d0e04;

typedef struct ?<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep __value_;
} __compressed_pair_96848e3b;

typedef struct ?<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
    struct __rep _field1;
} __compressed_pair_1d3f934a;

typedef struct ?<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    __compressed_pair_5b4d0e04 __r_;
} basic_string_a490aa4c;

typedef struct ?<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    __compressed_pair_96848e3b __r_;
} basic_string_90719d97;

typedef struct ?<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep _field1;
    } _field1;
} basic_string_f1844954;

typedef struct {
    CDUnknownFunctionPointerType *_field1;
    int _field2;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
        struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
            struct __rep _field1;
        } _field1;
    } _field3;
    int _field4;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field5;
    struct FeedbackParams _field6;
} VideoCodec_b32b7ed7;

#endif

#pragma mark Typedef'd Structures

typedef struct {
    id _field1;
    double _field2;
} CDStruct_7ba9398e;

typedef struct {
    _Bool enabled;
    _Bool mdxVersionInfo;
    _Bool mdxConfigurationOptions;
    _Bool isDownloadEnabled;
    _Bool didStartWithMdxVersion;
    _Bool activeProfileId;
    _Bool isPostPlayEnabled;
    _Bool isPinVerified;
    _Bool isSkipIntroEnabled;
    _Bool isContentPreviewPinVerified;
    _Bool handlePinVerificationWithVideoId;
    _Bool refreshCredentials;
    _Bool downloadJSSource;
    _Bool didJoinPlaySession;
    _Bool presentAlertController;
    _Bool showTargetMenuWithDelegate;
} CDStruct_eab3d8ba;

typedef struct {
    _Bool isVerticalBillboard;
    _Bool isBillboardPagingDisabled;
    _Bool isBillboardTrailer;
    _Bool isBillboardPrediction;
    _Bool isBillboardPrefetchPrediction;
    _Bool isBillboardPredictedDownload;
    _Bool isBillboardPad16x9;
    _Bool hasTags;
} CDStruct_f129f184;

typedef struct {
    _Bool isMdxButtonEnabled;
    _Bool isAirPlayButtonEnabled;
    _Bool isEpisodesButtonEnabled;
    _Bool isScaleButtonEnabled;
    _Bool isPIPButtonEnabled;
    _Bool isSkipRecapEnabled;
    _Bool isNextEpisodeButtonEnabled;
} CDStruct_8908e43b;

typedef struct {
    _Bool startedObserving;
    _Bool stoppedObserving;
    _Bool observedStateChange;
    _Bool observedProgressChange;
    _Bool observedExpiryUpdated;
} CDStruct_0e245729;

typedef struct {
    unsigned long long _field1;
    id *_field2;
    unsigned long long *_field3;
    unsigned long long _field4[5];
} CDStruct_70511ce9;

typedef struct {
    int minWidth;
    int barWidth;
    float minPercentage;
} CDStruct_4a1986b0;

typedef struct {
    int columnCount;
    long long strategy;
} CDStruct_ba06ad89;

typedef struct {
    long long _field1;
    void *_field2;
    CDUnknownFunctionPointerType _field3;
    CDUnknownFunctionPointerType _field4;
    CDUnknownFunctionPointerType _field5;
} CDStruct_e097db04;

typedef struct {
    long long type;
    double dimOpacity;
    _Bool useAutoLayout;
    _Bool isKids;
} CDStruct_1ac4c79d;

typedef struct {
    _Bool queueSelectedChoice;
    _Bool isInterstitialPostplay;
    _Bool randomizeDefault;
    _Bool toggleEndingChoicesAfterInitialDefault;
    float letterboxOffset;
    long long defaultChoiceStrategy;
    struct __CFString *defaultChoiceOverrideChoiceId;
} CDStruct_8b8b0b32;

typedef struct {
    struct __CFString *type;
    struct __CFString *newSegmentId;
    float newTimeMs;
    int videoId;
    int trackId;
} CDStruct_a83b476d;

typedef struct {
    struct __CFString *description;
    struct __CFString *segmentId;
    float startTimeMs;
} CDStruct_d333c40e;

typedef struct {
    struct __CFString *type;
} CDStruct_96fcac34;

typedef struct {
    CDStruct_8908e43b controls;
    _Bool isMdxEnabled;
    _Bool isPIPEnabled;
} CDStruct_4d28754b;

typedef struct {
    int fontSize;
    int minFontSize;
    double fontWeight;
    int numberOfLines;
    long long alignment;
    struct __CFString *hexColor;
    struct CGVector screenPosition;
    struct CGSize size;
    struct CGRect rect;
    float yOffset;
    float kern;
    _Bool fontSizeRatioCalculated;
    _Bool shouldRender;
    struct __CFString *shadowColor;
    struct CGSize shadowOffset;
    double shadowOpacity;
    double shadowRadius;
    _Bool shouldRenderShadow;
} CDStruct_84bf8c3a;

// Ambiguous groups
typedef struct {
    _Bool _field1;
} CDStruct_b31ca263;

typedef struct VideoSinkInterface<webrtc::VideoFrame> {
    CDUnknownFunctionPointerType *_field1;
} VideoSinkInterface_a6f4a563;

typedef struct function<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> {
    struct type _field1;
    struct __base<void (std::__1::shared_ptr<realm::SyncSession>, realm::SyncError)> *_field2;
} function_0cf83702;

typedef struct scoped_refptr<webrtc::AudioDecoderFactory> {
    struct AudioDecoderFactory *_field1;
} scoped_refptr_62d03f6b;

typedef struct scoped_refptr<webrtc::AudioEncoderFactory> {
    struct AudioEncoderFactory *_field1;
} scoped_refptr_8e647c17;

typedef struct scoped_refptr<webrtc::AudioProcessing> {
    struct AudioProcessing *_field1;
} scoped_refptr_0855df84;

typedef struct scoped_refptr<webrtc::AudioSourceInterface> {
    struct AudioSourceInterface *ptr_;
} scoped_refptr_8b29514b;

typedef struct scoped_refptr<webrtc::AudioTrackInterface> {
    struct AudioTrackInterface *_field1;
} scoped_refptr_833c0867;

typedef struct scoped_refptr<webrtc::DataChannelInterface> {
    struct DataChannelInterface *ptr_;
} scoped_refptr_09a33b10;

typedef struct scoped_refptr<webrtc::I420BufferInterface> {
    struct I420BufferInterface *ptr_;
} scoped_refptr_b674d2a6;

typedef struct scoped_refptr<webrtc::MediaSourceInterface> {
    struct MediaSourceInterface *ptr_;
} scoped_refptr_74f9e477;

typedef struct scoped_refptr<webrtc::MediaStreamInterface> {
    struct MediaStreamInterface *ptr_;
} scoped_refptr_6217ee82;

typedef struct scoped_refptr<webrtc::MediaStreamTrackInterface> {
    struct MediaStreamTrackInterface *ptr_;
} scoped_refptr_7d7e84a9;

typedef struct scoped_refptr<webrtc::PeerConnectionFactoryInterface> {
    struct PeerConnectionFactoryInterface *ptr_;
} scoped_refptr_1eaeeec2;

typedef struct scoped_refptr<webrtc::PeerConnectionInterface> {
    struct PeerConnectionInterface *ptr_;
} scoped_refptr_1f0d680a;

typedef struct scoped_refptr<webrtc::RtpReceiverInterface> {
    struct RtpReceiverInterface *ptr_;
} scoped_refptr_92bf499b;

typedef struct scoped_refptr<webrtc::RtpSenderInterface> {
    struct RtpSenderInterface *ptr_;
} scoped_refptr_3635276f;

typedef struct scoped_refptr<webrtc::VideoTrackInterface> {
    struct VideoTrackInterface *_field1;
} scoped_refptr_cae59c25;

typedef struct scoped_refptr<webrtc::VideoTrackSourceInterface> {
    struct VideoTrackSourceInterface *ptr_;
} scoped_refptr_a41c3e90;

typedef struct shared_ptr<realm::Realm> {
    struct Realm *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_130f66cc;

typedef struct shared_ptr<realm::SyncSession> {
    struct SyncSession *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3c92bca6;

typedef struct shared_ptr<realm::SyncUser> {
    struct SyncUser *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_324a0594;

typedef struct unique_ptr<realm::ThreadSafeReferenceBase, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
    struct __compressed_pair<realm::ThreadSafeReferenceBase *, std::__1::default_delete<realm::ThreadSafeReferenceBase>> {
        struct ThreadSafeReferenceBase *__first_;
    } __ptr_;
} unique_ptr_c83a4463;

typedef struct unique_ptr<rtc::BitrateAllocationStrategy, std::__1::default_delete<rtc::BitrateAllocationStrategy>> {
    struct __compressed_pair<rtc::BitrateAllocationStrategy *, std::__1::default_delete<rtc::BitrateAllocationStrategy>> {
        struct BitrateAllocationStrategy *_field1;
    } _field1;
} unique_ptr_e9310bd8;

typedef struct unique_ptr<rtc::IntervalRange, std::__1::default_delete<rtc::IntervalRange>> {
    struct __compressed_pair<rtc::IntervalRange *, std::__1::default_delete<rtc::IntervalRange>> {
        struct IntervalRange *_field1;
    } _field1;
} unique_ptr_f1df6efd;

typedef struct unique_ptr<webrtc::IceCandidateInterface, std::__1::default_delete<webrtc::IceCandidateInterface>> {
    struct __compressed_pair<webrtc::IceCandidateInterface *, std::__1::default_delete<webrtc::IceCandidateInterface>> {
        struct IceCandidateInterface *_field1;
    } _field1;
} unique_ptr_eddc2ff2;

typedef struct unique_ptr<webrtc::MediaConstraints, std::__1::default_delete<webrtc::MediaConstraints>> {
    struct __compressed_pair<webrtc::MediaConstraints *, std::__1::default_delete<webrtc::MediaConstraints>> {
        struct MediaConstraints *__value_;
    } __ptr_;
} unique_ptr_9751165c;

typedef struct unique_ptr<webrtc::RTPFragmentationHeader, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
    struct __compressed_pair<webrtc::RTPFragmentationHeader *, std::__1::default_delete<webrtc::RTPFragmentationHeader>> {
        struct RTPFragmentationHeader *_field1;
    } _field1;
} unique_ptr_91070b9b;

typedef struct unique_ptr<webrtc::VideoDecoder, std::__1::default_delete<webrtc::VideoDecoder>> {
    struct __compressed_pair<webrtc::VideoDecoder *, std::__1::default_delete<webrtc::VideoDecoder>> {
        struct VideoDecoder *__value_;
    } __ptr_;
} unique_ptr_28850a1b;

typedef struct unique_ptr<webrtc::VideoDecoderFactory, std::__1::default_delete<webrtc::VideoDecoderFactory>> {
    struct __compressed_pair<webrtc::VideoDecoderFactory *, std::__1::default_delete<webrtc::VideoDecoderFactory>> {
        struct VideoDecoderFactory *_field1;
    } _field1;
} unique_ptr_f2582d75;

typedef struct unique_ptr<webrtc::VideoEncoder, std::__1::default_delete<webrtc::VideoEncoder>> {
    struct __compressed_pair<webrtc::VideoEncoder *, std::__1::default_delete<webrtc::VideoEncoder>> {
        struct VideoEncoder *__value_;
    } __ptr_;
} unique_ptr_2722152f;

typedef struct unique_ptr<webrtc::VideoEncoderFactory, std::__1::default_delete<webrtc::VideoEncoderFactory>> {
    struct __compressed_pair<webrtc::VideoEncoderFactory *, std::__1::default_delete<webrtc::VideoEncoderFactory>> {
        struct VideoEncoderFactory *_field1;
    } _field1;
} unique_ptr_1f22d01c;

typedef struct vector<__weak id<RTCAudioSessionDelegate>, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<RTCAudioSessionDelegate>*, std::__1::allocator<__weak id<RTCAudioSessionDelegate>>> {
        id *__value_;
    } __end_cap_;
} vector_03b67401;

#pragma mark Named Unions

union VideoCodecUnion {
    struct VideoCodecVP8 _field1;
    struct VideoCodecVP9 _field2;
    struct VideoCodecH264 _field3;
    struct VideoCodecH263 _field4;
};

#pragma mark Typedef'd Unions

typedef union {
    unsigned long long m_value;
    char m_null_state;
} CDUnion_f76efdce;

typedef union {
    char _field1;
    int _field2;
} CDUnion_0506adf3;

