//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCFeature.h"

#import "SCFeatureSceneIntelligence-Protocol.h"
#import "SCLSIContextHandlerDelegate-Protocol.h"
#import "SCLSIDebugInfoPresenterDelegate-Protocol.h"
#import "SCLSIUtilityLensStatePresenterDelegate-Protocol.h"
#import "SCLSIUtilityLensStatePresenterV2Delegate-Protocol.h"
#import "SCManagedCapturerListener-Protocol.h"
#import "SCSceneIntelligenceListener-Protocol.h"

@class NSArray, NSString, NSUUID, SCARBarItem, SCDisposableObserverLifecycle, SCFeatureSceneIntelligenceAnalyticsController, SCFeatureSceneIntelligencePrivacyPrompter, SCLSIDebugInfoController, SCLSILensMetadataStore, SCLSIUtilityLensesController, SCLazy, SCLensSceneIntelligenceController, SCPredefinedLensMetadataStore, UIGestureRecognizer, UIView;
@protocol SCARBarCompatibleFeature, SCCapturer, SCFeatureARBar, SCFeatureCameraTooltipController, SCFeatureSceneIntelligenceLensDelegate, SCLensDataFetcher;

@interface SCFeatureSceneIntelligenceImpl : SCFeature <SCLSIUtilityLensStatePresenterDelegate, SCLSIUtilityLensStatePresenterV2Delegate, SCLSIDebugInfoPresenterDelegate, SCManagedCapturerListener, SCLSIContextHandlerDelegate, SCSceneIntelligenceListener, SCFeatureSceneIntelligence>
{
    id <SCCapturer> _capturer;
    SCDisposableObserverLifecycle *_appLifecycle;
    SCLensSceneIntelligenceController *_sceneIntelligenceController;
    SCLSIUtilityLensesController *_utilityLensesController;
    SCPredefinedLensMetadataStore *_suggestionResultsStore;
    SCLSILensMetadataStore *_lensMetadataStore;
    SCLSIDebugInfoController *_debugInfoController;
    SCFeatureSceneIntelligencePrivacyPrompter *_privacyPrompter;
    SCFeatureSceneIntelligenceAnalyticsController *_analyticsController;
    NSArray *_contextHandlers;
    SCLazy *_sceneIntelligenceLogger;
    id <SCFeatureCameraTooltipController> _holdTooltipController;
    id <SCFeatureCameraTooltipController> _fallbackTooltipController;
    SCLazy *_lensSceneIntService;
    id <SCLensDataFetcher> _lensDataFetcher;
    _Bool _isDisplayingScanningAnimation;
    UIView *_containerView;
    _Bool _isActive;
    _Bool _isPreparing;
    UIGestureRecognizer *_gestureRecognizer;
    id <SCARBarCompatibleFeature> _fallbackFeature;
    id <SCFeatureARBar> _arBar;
    id <SCFeatureSceneIntelligenceLensDelegate> lensDelegate;
    NSUUID *_uuid;
}

@property(readonly, nonatomic) NSUUID *uuid; // @synthesize uuid=_uuid;
@property(nonatomic) __weak id <SCFeatureSceneIntelligenceLensDelegate> lensDelegate; // @synthesize lensDelegate;
- (void).cxx_destruct;
- (void)managedCapturer:(id)arg1 didChangeCaptureDevicePosition:(id)arg2;
- (void)requstedToShowDebugInfoFromPresenter:(id)arg1;
- (void)utilityLensStatePresenterV2:(id)arg1 requestedToPreviewResultsForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenterV2:(id)arg1 requestedToShowResultsForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenterV2:(id)arg1 stopScanningForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenterV2:(id)arg1 startScanningForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 requestedToPreviewResultsForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 requestedToShowResultsForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 stopScanningForContext:(struct NSString *)arg2;
- (void)utilityLensStatePresenter:(id)arg1 startScanningForContext:(struct NSString *)arg2;
- (void)_showResultsForContext:(struct NSString *)arg1;
- (void)finishScanningAnimationWithSuccess:(_Bool)arg1;
- (void)_startScanningAnimationFromPoint:(struct CGPoint)arg1;
- (void)_triggerShazam;
- (void)_configureDataProvider;
- (void)_completeAfter:(double)arg1 startTime:(double)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_activateWithContexts:(id)arg1 point:(struct CGPoint)arg2 scanSource:(int)arg3;
- (void)_activateOnlyForActiveUtilityContext:(id)arg1 point:(struct CGPoint)arg2 scanSource:(int)arg3;
- (void)_activateForAllRelevantContextWithARBar:(id)arg1 point:(struct CGPoint)arg2 gestureRecognizer:(id)arg3;
- (void)handleGesture:(id)arg1;
- (_Bool)isEqual:(id)arg1;
- (void)deactivateFromARBar:(id)arg1;
- (void)restoreFromARBar:(id)arg1;
- (_Bool)activateFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)cancelPrepareForActivationFromARBar:(id)arg1;
- (void)prepareForActivationFromPoint:(struct CGPoint)arg1 gestureRecognizer:(id)arg2 arBar:(id)arg3;
- (void)hideOriginalUIForDisplayInARBar:(id)arg1;
@property(readonly, nonatomic) SCARBarItem *arBarItem;
- (void)sceneIntelligenceController:(id)arg1 request:(id)arg2 failedWithError:(id)arg3;
- (void)sceneIntelligenceController:(id)arg1 request:(id)arg2 receivedResponse:(id)arg3;
- (void)sceneIntelligenceController:(id)arg1 willProcessRequest:(id)arg2;
- (void)removeListener:(id)arg1;
- (void)addListener:(id)arg1;
- (id)shazamDataInterceptor;
- (_Bool)isPointInsideSceneIntelligenceUI:(struct CGPoint)arg1;
- (void)resetCurrentUtilityLensResults;
- (void)onUtilityLensChanged:(id)arg1;
- (void)analyzeSingleFrameWithContexts:(id)arg1 touchPoint:(struct CGPoint)arg2 scanSource:(int)arg3;
- (void)endAnalysisWithToken:(id)arg1;
- (id)beginAnalysisWithContexts:(id)arg1 touchPoint:(struct CGPoint)arg2 scanSource:(int)arg3;
- (void)activate;
- (void)configureWithView:(id)arg1;
- (id)initWithCapturer:(id)arg1 requestManager:(id)arg2 snapTokenProvider:(id)arg3 lensDataFetcher:(id)arg4 experimentManager:(id)arg5 privacyPrompter:(id)arg6 sceneIntelligenceLogger:(id)arg7 holdTooltipController:(id)arg8 fallbackTooltipController:(id)arg9 fallbackFeature:(id)arg10;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

