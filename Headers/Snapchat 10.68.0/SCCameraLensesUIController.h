//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCBaseLensesUIController.h"

#import "SCCameraLensesControllerProtocol-Protocol.h"
#import "SCLensEntryPointTrackableProtocol-Protocol.h"
#import "SCPageNameLogging-Protocol.h"
#import "SCTraceEnabled-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class NSObject, NSString, SCArcadiaUIController, SCCameraLensesInteractor, SCCameraLensesSnappablesSelectionHandler, SCGrowingButton, SCLensAnalyticsDataManger, SCLensCoreAnalyticsListener, SCLensEntryPointProvider, SCLensEntryPointTracker, SCLensInfoController, SCLensInfoViewModel, SCSnappablesPlayButton, SCUserSession, UIButton, UILongPressGestureRecognizer, UITapGestureRecognizer, UIView;
@protocol OS_dispatch_queue, SCCameraOverlayDelegate, SCFeatureSceneIntelligence, SCLensCameraScreenDataProviderProtocol, SCStudioLensLogger;

@interface SCCameraLensesUIController : SCBaseLensesUIController <SCTraceEnabled, UIGestureRecognizerDelegate, SCCameraLensesControllerProtocol, SCLensEntryPointTrackableProtocol, SCPageNameLogging>
{
    SCCameraLensesInteractor *_interactor;
    SCArcadiaUIController *_arcadiaUIController;
    SCLensCoreAnalyticsListener *_coreAnalyticsListener;
    SCLensEntryPointProvider *_lensEntryPointProvider;
    SCLensEntryPointTracker *_lensEntryPointTracker;
    id <SCStudioLensLogger> _studioLensLogger;
    SCCameraLensesSnappablesSelectionHandler *_snappableSelectionHandler;
    UITapGestureRecognizer *_snappablesPlayButtonTapGestureRecognizer;
    UILongPressGestureRecognizer *_snappablesPlayButtonLongPressGestureRecognizer;
    SCGrowingButton *_exitFullScreenButton;
    _Bool _allInterfaceElementsHidden;
    NSString *_loadingSnappableLensId;
    NSString *_scrolledFromSnappableLensId;
    UIView *_lensControlsContainer;
    SCUserSession *_userSession;
    _Bool _closeButtonSetHidden;
    id <SCFeatureSceneIntelligence> _sceneIntelligence;
    _Bool _isPlayingSnappable;
    SCLensInfoViewModel *_lensInfoViewModel;
    id <SCCameraOverlayDelegate> _cameraViewDelegate;
    SCGrowingButton *_infoButton;
    SCLensAnalyticsDataManger *_lensAnalyticsDataManager;
    SCLensInfoController *_lensInfoController;
    NSObject<OS_dispatch_queue> *_lookseryProfilingEngineSerialQueue;
    UIButton *_ctaButton;
    SCGrowingButton *_lensesOpenCloseButton;
}

+ (id)lensPageViewName;
@property(retain, nonatomic) SCGrowingButton *lensesOpenCloseButton; // @synthesize lensesOpenCloseButton=_lensesOpenCloseButton;
@property(retain, nonatomic) UIButton *ctaButton; // @synthesize ctaButton=_ctaButton;
@property(retain) NSObject<OS_dispatch_queue> *lookseryProfilingEngineSerialQueue; // @synthesize lookseryProfilingEngineSerialQueue=_lookseryProfilingEngineSerialQueue;
@property(retain, nonatomic) SCLensInfoController *lensInfoController; // @synthesize lensInfoController=_lensInfoController;
@property(retain, nonatomic) SCLensAnalyticsDataManger *lensAnalyticsDataManager; // @synthesize lensAnalyticsDataManager=_lensAnalyticsDataManager;
@property(retain, nonatomic) SCGrowingButton *infoButton; // @synthesize infoButton=_infoButton;
@property(nonatomic) __weak id <SCCameraOverlayDelegate> cameraViewDelegate; // @synthesize cameraViewDelegate=_cameraViewDelegate;
@property(readonly, nonatomic) _Bool allInterfaceElementsHidden; // @synthesize allInterfaceElementsHidden=_allInterfaceElementsHidden;
- (void).cxx_destruct;
- (void)lensBitmojiAlertUIControllerDidDisappear:(id)arg1;
- (void)lensBitmojiAlertUIControllerDidAppear:(id)arg1;
- (unsigned long long)lensEntryPoint;
- (void)resetLensEntryPoint;
- (void)willExitFullscreen;
- (void)didEnterPreview;
- (void)lensCarouselPresenter:(id)arg1 didEndScrolling:(id)arg2 atLens:(id)arg3;
- (void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3 selectedLens:(id)arg4;
- (id)state;
- (_Bool)blockTouchesForCurrentLensWithNormalizedTouchPoints:(id)arg1 touchTypeMask:(unsigned long long)arg2;
- (id)pendingDeeplinkBitmojiLensId;
- (id)activeLensIcon;
- (_Bool)disallowSnapRecording;
- (_Bool)_isCurrentLensLoadingInProgress;
- (void)ctaButtonPressed;
- (void)setLensCtaButtonHidden:(_Bool)arg1;
- (void)updateCtaButtonContentAndConstraints;
- (id)_ctaTitleForLens:(id)arg1;
- (id)_fallbackCtaTitleForLens:(id)arg1;
- (void)infoButtonPressed;
- (void)setLensInfoButtonHidden:(_Bool)arg1;
- (void)updateInfoButtonConstraints;
- (id)pageViewName;
- (void)_preloadLensInfoControllerForLensIfNeeded:(id)arg1;
- (void)_lensCoreHandledAnExceptionNotificationReceived:(id)arg1;
- (void)lensesOpenCloseButtonPressed;
- (void)setLensesOpenCloseButtonVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (void)setUIActivatedForLens:(id)arg1;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 performInterfaceAction:(unsigned long long)arg3 interfaceElement:(unsigned long long)arg4 interfaceData:(id)arg5;
- (void)_setSnapButtonHidden:(_Bool)arg1;
- (void)_exitFullScreenButtonTapped:(id)arg1;
- (void)exitFullScreenMode;
- (void)_updateVolumeHandlingState;
- (void)_removeExitFullScreenButton;
- (void)_addExitFullScreenButton;
- (void)_setAllInterfaceElementsHidden:(_Bool)arg1;
- (void)setCloseButtonHidden:(_Bool)arg1;
- (void)setCarouselHidden:(_Bool)arg1;
- (void)_snappablesPlayButtonTapped:(id)arg1;
- (void)_pushSnappablesPlayButtonByTap:(_Bool)arg1;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (_Bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (_Bool)_isSnappablesPlayButtonVisible;
- (void)_removeSnappablesPlayButton;
- (void)_hideSnappablesPlayButton;
- (void)_activateSnappablesPlayButtonWithGradientColors:(id)arg1;
- (void)_showLoadingSnappablesPlayButtonWithGradientColors:(id)arg1;
- (void)_removeSnappablesPlayButtonGestureRecognizersIfNeeded;
- (_Bool)isPlayingSnappable;
- (void)effectComponent:(id)arg1 didTurnOffEffectWithId:(id)arg2 features:(unsigned long long)arg3;
- (void)effectComponent:(id)arg1 didTurnOnEffectWithId:(id)arg2 features:(unsigned long long)arg3;
- (void)effectComponent:(id)arg1 willTurnOnEffectWithId:(id)arg2;
@property(retain, nonatomic) SCSnappablesPlayButton *snappablesPlayButton;
- (void)cleanup;
- (void)activateLens:(id)arg1 launchData:(id)arg2 setLensCompletion:(CDUnknownBlockType)arg3 completion:(CDUnknownBlockType)arg4;
- (void)lensCarouselPresenter:(id)arg1 didSelectLens:(id)arg2 index:(unsigned long long)arg3 originalLensIndex:(unsigned long long)arg4 totalLensesCount:(unsigned long long)arg5;
- (void)updateUIElementsVisibilityForLens:(id)arg1;
- (_Bool)isActiveCommunityLens;
- (void)setLensesActive:(_Bool)arg1 appearanceConfiguration:(id)arg2 activationState:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (_Bool)pointInsideLensCtaButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensInfoButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensLogoPickerUI:(struct CGPoint)arg1;
- (_Bool)_pointInsideLensView:(struct CGPoint)arg1 cellFramesOnly:(_Bool)arg2;
- (void)hideLensesUI:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)hideLensesUI:(_Bool)arg1;
- (void)showLensesUI:(_Bool)arg1;
- (void)showLensesUI:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)applyCollectionViewConstraints:(id)arg1;
- (void)handleReloadLensDataProviderWithLensIdToRestore:(id)arg1;
- (void)handleCloseLensesAction;
- (void)_prepareLensControlsContainer;
- (id)lensFpsLogger;
- (void)dealloc;
- (id)initWithCameraLensesInteractor:(id)arg1 parentViewContainer:(id)arg2 hidableViewContainer:(id)arg3 cameraViewDelegate:(id)arg4 lensProcessingCore:(id)arg5 sceneIntelligence:(id)arg6 snappableSelectionHandler:(id)arg7 userSession:(id)arg8 conversationMetadataProvider:(id)arg9 lensUserInterfaceDelegate:(id)arg10 lensCarousel:(id)arg11 lensEntryPointProvider:(id)arg12 lensUserProvider:(id)arg13;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) id <SCLensCameraScreenDataProviderProtocol> lensDataProvider; // @dynamic lensDataProvider;
@property(nonatomic) __weak UIView *parentView; // @dynamic parentView;
@property(readonly) Class superclass;

@end

