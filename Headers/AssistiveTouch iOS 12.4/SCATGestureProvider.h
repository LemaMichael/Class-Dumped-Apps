//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCATElementManager.h"

#import "SCATGestureDrawingViewDelegate-Protocol.h"
#import "SCATGestureFingersElementDelegate-Protocol.h"
#import "SCATMenuCustomGestureItemsViewDelegate-Protocol.h"
#import "SCATMenuFingerItemsViewDelegate-Protocol.h"
#import "SCATMenuFlickItemsViewDelegate-Protocol.h"
#import "SCATMenuForceTouchItemsViewDelegate-Protocol.h"
#import "SCATMenuGestureConfirmationItemsViewDelegate-Protocol.h"
#import "SCATMenuObserver-Protocol.h"
#import "SCATMenuPanItemsViewDelegate-Protocol.h"
#import "SCATMenuPinchItemsViewDelegate-Protocol.h"
#import "SCATMenuStopContinuousGestureItemViewDelegate-Protocol.h"
#import "SCATPointPickerDelegate-Protocol.h"

@class NSArray, NSMutableArray, NSString, NSTimer, SCATGestureArrowView, SCATGestureDrawingElementManager, SCATGestureFingersElement, SCATMenu, SCATPointPicker;
@protocol SCATElement, SCATGestureProviderDelegate;

@interface SCATGestureProvider : SCATElementManager <SCATMenuObserver, SCATPointPickerDelegate, SCATMenuFlickItemsViewDelegate, SCATMenuForceTouchItemsViewDelegate, SCATMenuFingerItemsViewDelegate, SCATMenuPanItemsViewDelegate, SCATMenuStopContinuousGestureItemViewDelegate, SCATMenuGestureConfirmationItemsViewDelegate, SCATMenuPinchItemsViewDelegate, SCATMenuCustomGestureItemsViewDelegate, SCATGestureDrawingViewDelegate, SCATGestureFingersElementDelegate>
{
    SCATMenu *_menu;
    NSTimer *_tellMeWhenGestureTimer;
    SCATPointPicker *_lineGesturePointPicker;
    SCATGestureDrawingElementManager *_drawingElementManager;
    NSMutableArray *_continuousGesturePoints;
    NSMutableArray *_continuousGestureTimes;
    NSString *_continuousGestureName;
    _Bool _showsFingers;
    unsigned long long _numberOfFingersForGestures;
    _Bool _isReversingContinuousGesture;
    _Bool _needsScanning;
    double _currentForce;
    double _targetForce;
    double _currentY;
    long long _currentOrbGestureMode;
    SCATGestureFingersElement *_elementForFingers;
    _Bool _hidden;
    _Bool _isPinching;
    _Bool _shouldAllowFingersForContinuousGesture;
    id <SCATGestureProviderDelegate> _delegate;
    SCATGestureArrowView *_arrowView;
    SCATElementManager *_currentSwitchController;
    NSArray *_panFingerPositions;
    NSArray *_pinchFingerOriginalPositions;
    double _pinchRadius;
    double _pinchAngle;
    unsigned long long _lineGestureState;
    unsigned long long _lineGestureType;
    double _alphaForFingers;
    struct CGPoint _startingScreenPointForGestures;
    struct CGPoint _pinchFulcrum;
    struct CGPoint _endPointForLineGesture;
    struct CGPoint _currentHoldPoint;
}

@property(nonatomic) struct CGPoint currentHoldPoint; // @synthesize currentHoldPoint=_currentHoldPoint;
@property(nonatomic) double alphaForFingers; // @synthesize alphaForFingers=_alphaForFingers;
@property(nonatomic) _Bool shouldAllowFingersForContinuousGesture; // @synthesize shouldAllowFingersForContinuousGesture=_shouldAllowFingersForContinuousGesture;
@property(nonatomic) struct CGPoint endPointForLineGesture; // @synthesize endPointForLineGesture=_endPointForLineGesture;
@property(nonatomic) unsigned long long lineGestureType; // @synthesize lineGestureType=_lineGestureType;
@property(nonatomic) unsigned long long lineGestureState; // @synthesize lineGestureState=_lineGestureState;
@property(nonatomic) double pinchAngle; // @synthesize pinchAngle=_pinchAngle;
@property(nonatomic) double pinchRadius; // @synthesize pinchRadius=_pinchRadius;
@property(nonatomic) struct CGPoint pinchFulcrum; // @synthesize pinchFulcrum=_pinchFulcrum;
@property(retain, nonatomic) NSArray *pinchFingerOriginalPositions; // @synthesize pinchFingerOriginalPositions=_pinchFingerOriginalPositions;
@property(nonatomic) _Bool isPinching; // @synthesize isPinching=_isPinching;
@property(retain, nonatomic) NSArray *panFingerPositions; // @synthesize panFingerPositions=_panFingerPositions;
@property(retain, nonatomic) SCATElementManager *currentSwitchController; // @synthesize currentSwitchController=_currentSwitchController;
@property(nonatomic) struct CGPoint startingScreenPointForGestures; // @synthesize startingScreenPointForGestures=_startingScreenPointForGestures;
@property(retain, nonatomic) SCATGestureArrowView *arrowView; // @synthesize arrowView=_arrowView;
@property(nonatomic, getter=isHidden) _Bool hidden; // @synthesize hidden=_hidden;
@property(nonatomic) __weak id <SCATGestureProviderDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)didActivateFingersElement:(id)arg1;
- (void)fingersElement:(id)arg1 didBecomeFocused:(_Bool)arg2;
- (void)driver:(id)arg1 willUnfocusFromContext:(id)arg2;
- (void)driver:(id)arg1 didFocusOnContext:(id)arg2 oldContext:(id)arg3;
- (void)driver:(id)arg1 willFocusOnContext:(id)arg2;
- (_Bool)handleInputAction:(long long)arg1 withElement:(id)arg2;
- (_Bool)allowsDwellScanningToAbortAfterTimeout;
- (_Bool)allowsDwellSelection;
- (_Bool)shouldKeepScannerAwake;
- (void)scannerWillMakeManagerInactive:(id)arg1;
- (void)scannerWillMakeManagerActive:(id)arg1;
- (id)elementBefore:(id)arg1 didWrap:(_Bool *)arg2 options:(int *)arg3;
- (id)elementAfter:(id)arg1 didWrap:(_Bool *)arg2 options:(int *)arg3;
- (id)lastElementWithOptions:(int *)arg1;
- (id)firstElementWithOptions:(int *)arg1;
- (_Bool)canBeActiveElementManager;
- (void)_resignSwitchControllerPrivileges;
- (void)_requestSwitchControllerPrivileges;
- (void)drawingViewController:(id)arg1 shouldResetScanningFromElement:(id)arg2;
- (void)exitDrawingViewController:(id)arg1;
- (_Bool)drawingViewController:(id)arg1 moveFingersToPoints:(id)arg2;
- (void)touchUpForDrawingViewController:(id)arg1;
- (void)touchDownForDrawingViewController:(id)arg1;
- (void)pointPickerDidFinishSweeping:(id)arg1;
- (void)pointPicker:(id)arg1 didSweepOutOfFocusContext:(id)arg2 isRefiningPoint:(_Bool)arg3;
- (void)pointPicker:(id)arg1 didSweepIntoFocusContext:(id)arg2 isRefiningPoint:(_Bool)arg3;
- (void)pointPicker:(id)arg1 didPickPoint:(struct CGPoint)arg2;
- (void)menuDidUpdateTipObject:(id)arg1;
- (void)menuDidFinishTransition:(id)arg1;
- (void)menuDidDisappear:(id)arg1;
- (void)menuWillDisappear:(id)arg1;
- (void)menuDidAppear:(id)arg1;
- (void)menuWillAppear:(id)arg1;
- (void)performHoldAtPoint:(struct CGPoint)arg1 isDown:(_Bool)arg2;
- (void)replayGesture:(id)arg1;
- (id)gesturesSheet;
- (void)performTap;
- (void)performTapAndHold;
- (void)didChooseCreateInCustomGestureItemsViewController:(id)arg1;
- (void)didChooseAddRecentInCustomGestureItemsViewController:(id)arg1;
- (void)customGestureItemsViewController:(id)arg1 didChooseGesture:(id)arg2;
- (id)_repositionedGestureFromOriginalGesture:(id)arg1;
- (struct CGPoint)_centerOfFingersForGesture:(id)arg1;
- (id)contextForCustomGestureItemsViewController:(id)arg1;
- (void)fingerItemsViewController:(id)arg1 didChooseNumberOfFingers:(unsigned long long)arg2;
- (void)didCancelGesture:(id)arg1;
- (void)didRequestRedoGesture:(id)arg1;
- (void)didConfirmGesture:(id)arg1;
- (id)nameForConfirmationButton:(id)arg1;
- (struct CGRect)rectToClearForStop:(id)arg1;
- (void)didChooseStop:(id)arg1;
- (struct CGRect)rectToClearForPinchGesture:(id)arg1;
- (void)willPopPinchItemsViewController:(id)arg1;
- (void)didPushPinchItemsViewController:(id)arg1;
- (void)didChooseRotateCounterclockwise:(id)arg1;
- (void)didChooseRotateClockwise:(id)arg1;
- (void)didChoosePinchOut:(id)arg1;
- (void)didChoosePinchIn:(id)arg1;
- (void)_didChoosePinchItemWithName:(id)arg1 selector:(SEL)arg2;
- (struct CGPoint)_midpointFromFingerPosition:(struct CGPoint)arg1;
- (void)didChoosePanDown:(id)arg1;
- (void)didChoosePanUp:(id)arg1;
- (void)didChoosePanRight:(id)arg1;
- (void)didChoosePanLeft:(id)arg1;
- (void)_didChoosePanWithName:(id)arg1 selector:(SEL)arg2;
- (void)_updateOrbGestureModeWithElement:(id)arg1;
- (id)_currentElementExcludingSCATMenuElements;
- (void)_endForceTouchGestureAndCloseMenu;
- (void)_forceTouchSwipeUp;
- (void)_forceTouch;
- (void)didChooseMorePreviewActions;
- (void)didChoosePreviewActions:(id)arg1;
- (void)didChooseForceTouchMaximum:(id)arg1;
- (void)didChooseForceTouchCancel:(id)arg1;
- (void)didChooseForceTouchGesture:(id)arg1;
- (void)didChooseArbitraryFlick:(id)arg1;
- (void)didChooseFlickRight:(id)arg1;
- (void)didChooseFlickLeft:(id)arg1;
- (void)didChooseFlickUp:(id)arg1;
- (void)didChooseFlickDown:(id)arg1;
- (void)_didChooseFlickWithAngle:(double)arg1 name:(id)arg2;
- (unsigned long long)numberOfFingers;
- (void)didChooseDrawingGesture:(id)arg1;
- (void)didChooseFingers:(id)arg1;
- (void)didChooseDoubleTapGesture:(id)arg1;
- (void)didChooseHoldAndDragGesture:(id)arg1;
- (void)didChooseDragGesture:(id)arg1;
- (void)didChoosePinchGesture:(id)arg1;
- (void)didChoosePanGesture:(id)arg1;
- (void)didChooseFlickGesture:(id)arg1;
- (void)didChooseFavorites:(id)arg1;
- (void)_startConfirmingLineGestureWithEndpoint:(struct CGPoint)arg1;
- (void)_startPickingEndPointForLineGesture:(unsigned long long)arg1;
- (id)_promptForLineGesture:(unsigned long long)arg1;
- (void)_clearLineGestureState;
- (struct CGRect)rectToClearForFingersWithGestureSheet:(_Bool)arg1;
- (struct CGRect)_rectToClearForPinchGesture;
- (struct CGRect)_rectForFingers:(id)arg1;
- (void)_updateShowsFingers;
- (void)_setShowsFingers:(_Bool)arg1;
- (unsigned long long)_numberOfFingers;
- (unsigned long long)_numberOfFingersWithGestureSheet:(_Bool)arg1;
- (void)_setNumberOfFingersForGestures:(unsigned long long)arg1;
- (void)_clearArrowView;
- (void)_startTellMeWhenTimerWithSelector:(SEL)arg1 interval:(double)arg2;
- (void)_startTellMeWhenTimerWithSelector:(SEL)arg1;
- (void)_clearTellMeWhenTimer;
- (void)_updateVisibleFingers;
- (void)_endPinchMode;
- (void)_startPinchMode;
- (void)_finishLineGesture;
- (void)_panDown;
- (void)_panUp;
- (void)_panRight;
- (void)_panLeft;
- (void)_panByDelta:(struct CGSize)arg1;
- (id)_panPositionsAdjustedByDelta:(struct CGSize)arg1;
- (void)_rotateCounterclockwise;
- (void)_rotateClockwise;
- (void)_pinchIn;
- (void)_pinchOut;
- (void)_updatePinchPositionsWithAttemptedRadiusDelta:(double)arg1 angleDelta:(double)arg2;
- (double)_pinchAngleAdjustedByDelta:(double)arg1;
- (double)_pinchRadiusAdjustedByDelta:(double)arg1;
- (id)_pinchPositionsWithRadius:(double)arg1 angle:(double)arg2;
- (struct CGPoint)_fingerPositionForMidpoint:(struct CGPoint)arg1;
- (void)_performFlickGestureWithAngle:(double)arg1 name:(id)arg2;
- (void)_performTapGestureForDoubleTap:(_Bool)arg1;
- (void)_performGesture:(id)arg1;
- (void)_saveRecentGesture:(id)arg1;
- (void)_handleCompletedContinuousGesture;
- (void)_addPointsToContinuousGestureData:(id)arg1;
- (void)_initializeContinuousGestureDataWithName:(id)arg1 points:(id)arg2;
- (void)_prepareToBeginContinuousGesture;
- (void)_resetContinuousGestureData;
- (_Bool)_isPerformingContinuousGesture;
- (id)_startingPointsAsValues;
- (id)_startingPointsAsStrings;
- (id)_pointValuesFromPointStrings:(id)arg1;
- (id)_pointStringsFromPointValues:(id)arg1;
- (struct CGPoint)_startingPointForGestures;
- (void)_updateStartingPointForGesturesWithScreenPoint:(id)arg1;
- (id)identifier;
@property(readonly, nonatomic) id <SCATElement> elementForFingers;
- (void)orientationDidChange:(id)arg1;
- (void)dealloc;
- (id)initWithMenu:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

