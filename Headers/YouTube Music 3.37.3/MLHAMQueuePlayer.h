//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "HAMPlayerInternalDelegate-Protocol.h"
#import "MLHAMPlayerItemPlayerBridge-Protocol.h"
#import "MLHAMPlayerProtocol-Protocol.h"
#import "MLHAMQueuePlayerSegmentListDelegate-Protocol.h"
#import "MLQueuePlayer-Protocol.h"
#import "MLViewportSizeObserver-Protocol.h"
#import "YTAudioSessionInterruptionObserver-Protocol.h"
#import "YTAudioSessionOutputDeviceUnavailableObserver-Protocol.h"
#import "YTAudioSessionRouteChangeObserver-Protocol.h"
#import "YTSystemNotificationsObserver-Protocol.h"

@class GIMMe, HAMEventCenter, HAMPixelBufferVideoTrackRenderer, HAMPlayerContext, HAMPlayerInternal, HAMQueueingRootSampleBufferSource, HAMVideoDecoderPixelBufferSource, MLAudioSession, MLFormat, MLHAMPlayerItemSegment, MLHAMQueuePlayerSegmentList, MLPlayerEventCenter, MLPlayerStickySettings, MLSegmentTimeline, MLTextTrackRenderer, MLVideo, MLVideoDecoderFactory, MLViewportSize, NSArray, NSData, NSDictionary, NSError, NSString, UIView, YTIHamplayerHotConfig, YTSystemNotifications;
@protocol HAMAudioTrackRenderer, HAMClock, HAMFrameSourceDelegate, MLAudioFormatConstraint, MLCaptionDisplayController, MLCaptionTrack, MLCuepointCollector, MLHAMPlayerViewProtocol, MLPlayerCaptionDelegate, MLPlayerConfig, MLPlayerItemDelegate, MLPlayerItemInternal, MLQueuePlayerDelegate, MLQueuePlayerViewProvider, MLVideoFormatConstraint, MLVideoSplicer, MLViewportSizeProvider, OS_dispatch_queue;

@interface MLHAMQueuePlayer : NSObject <HAMPlayerInternalDelegate, MLHAMQueuePlayerSegmentListDelegate, MLViewportSizeObserver, YTAudioSessionInterruptionObserver, YTAudioSessionOutputDeviceUnavailableObserver, YTAudioSessionRouteChangeObserver, YTSystemNotificationsObserver, MLHAMPlayerItemPlayerBridge, MLHAMPlayerProtocol, MLQueuePlayer>
{
    MLAudioSession *_audioSession;
    id <HAMFrameSourceDelegate> _frameSourceDelegate;
    NSObject<OS_dispatch_queue> *_playerQueue;
    HAMEventCenter *_hamEventCenter;
    YTIHamplayerHotConfig *_hamplayerHotConfig;
    YTSystemNotifications *_systemNotifications;
    id <HAMClock> _clock;
    MLPlayerStickySettings *_stickySettings;
    id <MLQueuePlayerViewProvider> _playerViewProvider;
    HAMPlayerInternal *_player;
    MLVideoDecoderFactory *_videoDecoderFactory;
    HAMPixelBufferVideoTrackRenderer *_videoTrackRenderer;
    id <HAMAudioTrackRenderer> _audioTrackRenderer;
    MLTextTrackRenderer *_textTrackRenderer;
    int _foregroundAudioOnlyPlaybackReason;
    long long _pendingSeeks;
    double _initialSeekTime;
    double _initialSeekToleranceBefore;
    double _initialSeekToleranceAfter;
    _Bool _isInBackground;
    NSError *_playerError;
    long long _playerStatus;
    NSArray *_startedTrackRenderers;
    int _activeTrackRendererType;
    int _startedTrackRendererMediaContentType;
    _Bool _userRequestedPlay;
    double _lastReportedCurrentTime;
    double _lastReportedBufferedTime;
    _Bool _isAutoSeeking;
    double _readaheadCap;
    HAMVideoDecoderPixelBufferSource *_pixelBufferSource;
    HAMQueueingRootSampleBufferSource *_rootVideoSampleBufferSource;
    HAMQueueingRootSampleBufferSource *_rootAudioSampleBufferSource;
    HAMQueueingRootSampleBufferSource *_rootTextSampleBufferSource;
    MLHAMPlayerItemSegment *_currentSegment;
    long long _periodCount;
    MLHAMQueuePlayerSegmentList *_segmentList;
    float _preferredRate;
    id <MLQueuePlayerDelegate> _delegate;
    id <MLViewportSizeProvider> _viewportSizeProvider;
    _Bool _currentVideoIsLocal;
    _Bool _muted;
    _Bool _peggedToLive;
    _Bool _externalPlaybackFullscreen;
    _Bool _externalPlaybackAllowed;
    float _rate;
    float _volume;
    id <MLAudioFormatConstraint> _audioFormatConstraint;
    double _bufferedMediaTime;
    id <MLCaptionDisplayController> _captionDisplayController;
    id <MLPlayerConfig> _config;
    NSError *_error;
    MLPlayerEventCenter *_playerEventCenter;
    double _maximumSeekableTime;
    double _minimumSeekableTime;
    MLSegmentTimeline *_segmentTimeline;
    NSArray *_selectableAudioFormats;
    NSArray *_selectableVideoFormats;
    MLFormat *_selectedAudioFormat;
    MLFormat *_selectedVideoFormat;
    long long _state;
    MLVideo *_video;
    id <MLVideoFormatConstraint> _videoFormatConstraint;
    HAMPlayerContext *_context;
    UIView<MLHAMPlayerViewProtocol> *_playerView;
    id <MLPlayerCaptionDelegate> _captionDelegate;
    long long _itemState;
    GIMMe *_gimme;
    CDStruct_d60ef703 _currentTime;
}

@property(nonatomic) __weak GIMMe *gimme; // @synthesize gimme=_gimme;
@property(readonly, nonatomic) long long itemState; // @synthesize itemState=_itemState;
@property(nonatomic) _Bool externalPlaybackAllowed; // @synthesize externalPlaybackAllowed=_externalPlaybackAllowed;
@property(nonatomic) _Bool externalPlaybackFullscreen; // @synthesize externalPlaybackFullscreen=_externalPlaybackFullscreen;
@property(nonatomic) __weak id <MLPlayerCaptionDelegate> captionDelegate; // @synthesize captionDelegate=_captionDelegate;
@property(readonly, nonatomic) _Bool peggedToLive; // @synthesize peggedToLive=_peggedToLive;
@property(readonly, nonatomic) UIView<MLHAMPlayerViewProtocol> *playerView; // @synthesize playerView=_playerView;
@property(readonly, nonatomic) HAMPlayerContext *context; // @synthesize context=_context;
@property(nonatomic) float volume; // @synthesize volume=_volume;
@property(retain, nonatomic) id <MLVideoFormatConstraint> videoFormatConstraint; // @synthesize videoFormatConstraint=_videoFormatConstraint;
@property(readonly, nonatomic) long long state; // @synthesize state=_state;
@property(readonly, nonatomic) MLFormat *selectedVideoFormat; // @synthesize selectedVideoFormat=_selectedVideoFormat;
@property(readonly, nonatomic) MLFormat *selectedAudioFormat; // @synthesize selectedAudioFormat=_selectedAudioFormat;
@property(readonly, nonatomic) NSArray *selectableVideoFormats; // @synthesize selectableVideoFormats=_selectableVideoFormats;
@property(readonly, nonatomic) NSArray *selectableAudioFormats; // @synthesize selectableAudioFormats=_selectableAudioFormats;
@property(readonly, nonatomic) MLSegmentTimeline *segmentTimeline; // @synthesize segmentTimeline=_segmentTimeline;
@property(nonatomic) float rate; // @synthesize rate=_rate;
@property(nonatomic, getter=isMuted) _Bool muted; // @synthesize muted=_muted;
@property(readonly, nonatomic) double minimumSeekableTime; // @synthesize minimumSeekableTime=_minimumSeekableTime;
@property(readonly, nonatomic) double maximumSeekableTime; // @synthesize maximumSeekableTime=_maximumSeekableTime;
@property(readonly, nonatomic) MLPlayerEventCenter *playerEventCenter; // @synthesize playerEventCenter=_playerEventCenter;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) _Bool currentVideoIsLocal; // @synthesize currentVideoIsLocal=_currentVideoIsLocal;
@property(readonly, nonatomic) CDStruct_d60ef703 currentTime; // @synthesize currentTime=_currentTime;
@property(readonly, nonatomic) id <MLPlayerConfig> config; // @synthesize config=_config;
@property(readonly, nonatomic) id <MLCaptionDisplayController> captionDisplayController; // @synthesize captionDisplayController=_captionDisplayController;
@property(readonly, nonatomic) double bufferedMediaTime; // @synthesize bufferedMediaTime=_bufferedMediaTime;
@property(retain, nonatomic) id <MLAudioFormatConstraint> audioFormatConstraint; // @synthesize audioFormatConstraint=_audioFormatConstraint;
- (void).cxx_destruct;
- (void)tryToResyncTracks;
- (id)liveHeadSegmentForItem:(id)arg1;
- (void)forceRemoveSegment:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)itemForError:(id)arg1;
- (void)terminatePlayerWithError:(id)arg1;
- (void)maybeSwitchToAVPlayer;
- (void)internalSetRate;
- (void)failWithError:(id)arg1;
- (void)updateForegroundAudioOnlyPlaybackReason;
- (void)setUpCaptionDisplayController;
- (void)setState:(long long)arg1;
- (void)updateActiveTrackRenderers;
- (void)internalSeekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3;
- (void)onNonFatalErrorEvent:(id)arg1;
- (void)onFormatSelectionEvent:(id)arg1;
- (void)registerWithEventCenter;
- (void)setupText;
- (void)setupVideo;
- (void)setupAudio;
- (void)updateVolume;
- (_Bool)userRequestedPlay;
- (long long)currentPlayerState;
- (void)playerItem:(id)arg1 DRMDidFailWithError:(id)arg2;
- (void)playerItem:(id)arg1 peggedToLiveDidChange:(_Bool)arg2;
- (void)playerItemRequestSeekingToEnd:(id)arg1 autoSeeking:(_Bool)arg2;
- (void)playerItem:(id)arg1 requestSeekingTo:(double)arg2 toleranceBefore:(double)arg3 toleranceAfter:(double)arg4;
- (void)playerItem:(id)arg1 videoTrackStatusDidChange:(_Bool)arg2;
- (void)playerItem:(id)arg1 textTrackStatusDidChange:(_Bool)arg2;
- (int)startedTrackRendererMediaContentType;
- (void)appDidBecomeActive:(id)arg1;
- (void)appDidEnterBackground:(id)arg1;
- (void)viewportSizeDidChange:(id)arg1;
- (void)outputRouteDidChange;
- (void)outputDeviceDidBecomeUnavailable;
- (void)didReceiveAudioSessionInterruptionWithType:(unsigned long long)arg1 options:(unsigned long long)arg2;
- (void)segmentListDidFailWithError:(id)arg1;
- (void)setCurrentSegment:(id)arg1;
- (void)setLive:(_Bool)arg1;
- (void)setStatus:(long long)arg1;
- (void)setStartedTrackRenderers:(id)arg1;
- (void)setSeekableTimeRange:(CDStruct_e83c9415)arg1;
- (void)setCurrentTime:(CDStruct_576a8307)arg1;
- (void)setBufferedTime:(CDStruct_1b6d18a9)arg1;
- (void)playerWillFailWithError:(id)arg1;
- (void)trackRenderer:(id)arg1 didFailWithError:(id)arg2;
- (void)playerDidTerminate;
@property(readonly, nonatomic) NSString *playerViewDebugType;
@property(readonly, nonatomic) id <MLPlayerItemInternal> currentPlayerItem;
@property(readonly, nonatomic) MLViewportSize *viewportSize;
- (void)setViewportSizeProvider:(id)arg1;
- (void)setPlayerCaptionsTextStyleRule:(id)arg1;
- (void)enablePlayerCaptionsWithOption:(id)arg1;
- (void)disablePlayerCaptions;
- (void)registerQOEController:(id)arg1;
@property(readonly, nonatomic) id <MLVideoSplicer> videoSplicer;
- (void)setLiveCaptionsVerticalRatio:(double)arg1;
- (void)setActiveCaptionTrack:(id)arg1;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekToTime:(double)arg1;
- (void)seekToProductionTime:(double)arg1;
- (void)seekToEnd;
- (void)replay;
- (void)playASAP;
- (void)play;
- (void)pause;
- (void)load;
- (void)terminate;
- (void)makeActivePlayer;
- (void)enableCaptionsIfAvailable;
@property(readonly, nonatomic) id <MLCuepointCollector> cuepointCollector;
@property(readonly, nonatomic) int playerType;
@property(readonly, nonatomic) NSDictionary *debugParameters;
@property(readonly, nonatomic) NSData *debugLogs;
@property(readonly, nonatomic) _Bool externalPlaybackActive;
- (void)addSegments:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(nonatomic) __weak id <MLPlayerItemDelegate> delegate;
- (_Bool)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3 inSegment:(id)arg4 error:(id *)arg5;
- (void)clipSegment:(id)arg1 toStart:(double)arg2 duration:(double)arg3 completion:(CDUnknownBlockType)arg4;
- (id)segmentsForPlayerItem:(id)arg1;
- (id)allSegments;
- (id)currentSegment;
- (void)removeAllSegments;
- (void)removeSegment:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addSegment:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)createSegmentWithPlayerItem:(id)arg1 error:(id *)arg2;
- (id)createSegmentWithPlayerItem:(id)arg1 startTime:(double)arg2 duration:(double)arg3 error:(id *)arg4;
- (id)createPlayerItem:(id)arg1 playerConfig:(id)arg2 error:(id *)arg3;
@property(readonly, nonatomic) MLVideo *video; // @synthesize video=_video;
- (void)setPeakBitrateFraction:(float)arg1;
- (void)setPreferredMaxReadahead:(double)arg1;
@property(readonly, nonatomic) NSArray *availableCaptionTracks;
@property(readonly, nonatomic) id <MLCaptionTrack> activeCaptionTrack;
@property(readonly, nonatomic) double totalMediaTime;
- (id)initWithStickySettings:(id)arg1 playerViewProvider:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

